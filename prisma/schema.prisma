datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? 
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}

model Session {
  id          String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
 // App models

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  plan          Plan            @default(FREE)
  
  accounts      Account[]
  sessions      Session[]
  products       Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Plan {
  FREE
  PREMIUM
}

model Product {
  id        String   @id @default(cuid())
  slug     String @unique
  name      String
  image    String?
  noteText String?
  informationText String?
  reviewText String?
  thanksTest String?
  backgroundColor String?
  enabled Boolean @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  
  reviews Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Review {
  id        String   @id @default(cuid())
  rating    Int
  text      String?
  ip        String
  // Audio URL
  audio    String?
  socialLink String?
  socialType socialType?
  // Image and name getting from social media
  name String?
  image String?

  productId String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum socialType {
  TWITTER
  LINKEDIN
}


